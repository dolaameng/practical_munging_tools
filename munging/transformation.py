"""
Transformation of features in df, including,
1. log transformation for positive skewed data 
1. sign-log transformation for real value skewed data 

References: 
1. "Practical Data Science with R" by Nina Zumel and John Mount, Chapter 3, 4
"""

import numpy as np 

def log_transform(df, feat_names, copy = True):
	"""
	Transform data using log, specially for data generated by mulplicative process.
	The data to be transformed must be POSITIVE, otherwise remove the bad data first 
	or use signed_log_transform instead.
	df: DataFrame
	feat_names: names of features to be transformed. 
	"""
	for f in feat_names:
		if np.any(df[f] <= 0):
			raise ValueError(f+":log_transform is for positive values, remove bad data or use signed_log_transform")
	result = df.copy() if copy else df 
	result.loc[:, feat_names] = np.log(result.loc[:, feat_names])
	return result

def arcsinh_transform(df, feat_names, copy = True):
	"""
	One of the universal methods other than signed logarithms to transform real values, 
	- the arcsinh function (see http://mng.bz/ZWQa)
	but they also distort data near zero and make almost any data appear to be bimodal.
	"""
	result = df.copy() if copy else df 
	result.loc[:, feat_names] = np.arcsinh(result.loc[:, feat_names])
	return result

def signed_log_transform(df, feat_names, copy = True):
	"""
	One of the universal methods other than signed logarithms to transform real values, 
	- the signed log function.
	"""
	result = df.copy() if copy else df 
	d = result.loc[:, feat_names]
	result.loc[:, feat_names] = np.where(np.abs(d) <= 1, 0, np.sign(d) * np.log(np.abs(d)))
	return result